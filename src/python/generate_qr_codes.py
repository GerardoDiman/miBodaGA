#!/usr/bin/env python3
"""
Script para generar c√≥digos QR para invitados de boda
Versi√≥n mejorada que maneja diferentes estructuras de datos
"""

import csv
import json
import random
import string
import os
import codecs
import qrcode
from datetime import datetime

# --- Configuraci√≥n ---
INPUT_CSV_FILENAME = 'data/invitados.csv'
OUTPUT_JSON_FILENAME = 'data/invitados.json'
QR_CODES_OUTPUT_FOLDER = 'qrcodes'
BASE_VALIDATION_URL = 'https://mibodaag.netlify.app/validar.html'  # <<-- ¬°CONFIGURA ESTA URL!
ID_LENGTH = 6
ID_CHARACTERS = string.ascii_lowercase + string.digits

# Configuraci√≥n de columnas (puede variar seg√∫n el CSV)
COLUMNA_NOMBRE = 'nombre'
COLUMNA_PASES = 'pases'
COLUMNA_NINOS = 'ninos'

# --- Fin Configuraci√≥n ---

def generar_id_unico(longitud, caracteres, ids_existentes):
    """Genera un ID aleatorio √∫nico que no exista en el set proporcionado."""
    while True:
        nuevo_id = ''.join(random.choices(caracteres, k=longitud))
        if nuevo_id not in ids_existentes:
            ids_existentes.add(nuevo_id)
            return nuevo_id

def generar_qr_code(id_invitado, nombre_invitado):
    """Genera un c√≥digo QR para un invitado espec√≠fico."""
    qr_data = f"{BASE_VALIDATION_URL}?id={id_invitado}"
    
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    
    # Guardar la imagen del QR
    qr_filename = os.path.join(QR_CODES_OUTPUT_FOLDER, f'{id_invitado}.png')
    img.save(qr_filename)
    
    print(f"  ‚úÖ C√≥digo QR generado para {nombre_invitado}: {qr_filename}")
    return qr_filename

def procesar_csv_existente():
    """Procesa el CSV existente y genera nuevos c√≥digos QR."""
    lista_invitados_json = []
    ids_generados = set()
    
    # Crear carpeta de salida para QRs si no existe
    if not os.path.exists(QR_CODES_OUTPUT_FOLDER):
        os.makedirs(QR_CODES_OUTPUT_FOLDER)
        print(f"üìÅ Carpeta de salida para QRs creada: {QR_CODES_OUTPUT_FOLDER}")
    
    if not os.path.exists(INPUT_CSV_FILENAME):
        print(f"‚ùå Error: El archivo CSV '{INPUT_CSV_FILENAME}' no fue encontrado.")
        return False
    
    print(f"üìÑ Procesando archivo CSV: {INPUT_CSV_FILENAME}...")
    
    try:
        with open(INPUT_CSV_FILENAME, mode='r', newline='', encoding='utf-8-sig') as csvfile:
            reader = csv.DictReader(csvfile)
            
            # Verificar columnas disponibles
            headers = reader.fieldnames
            print(f"üìã Columnas detectadas: {headers}")
            
            for i, row in enumerate(reader):
                try:
                    # Extraer datos
                    nombre = row.get(COLUMNA_NOMBRE, '').strip()
                    pases_str = row.get(COLUMNA_PASES, '0').strip()
                    ninos_str = row.get(COLUMNA_NINOS, '0').strip()
                    
                    # Validar que el nombre no est√© vac√≠o
                    if not nombre:
                        print(f"‚ö†Ô∏è  Advertencia: Fila {i+1} omitida porque el nombre est√° vac√≠o.")
                        continue
                    
                    # Generar nuevo ID √∫nico
                    id_unico = generar_id_unico(ID_LENGTH, ID_CHARACTERS, ids_generados)
                    
                    # Generar c√≥digo QR
                    generar_qr_code(id_unico, nombre)
                    
                    # Convertir pases y ni√±os a enteros
                    try:
                        pases_int = int(pases_str) if pases_str else 0
                    except ValueError:
                        print(f"‚ö†Ô∏è  Advertencia: Valor no num√©rico para 'Pases' en fila {i+1} ('{pases_str}'). Se usar√° 0.")
                        pases_int = 0
                    
                    try:
                        ninos_int = int(ninos_str) if ninos_str else 0
                    except ValueError:
                        print(f"‚ö†Ô∏è  Advertencia: Valor no num√©rico para 'Ni√±os' en fila {i+1} ('{ninos_str}'). Se usar√° 0.")
                        ninos_int = 0
                    
                    # Crear el diccionario para este invitado
                    invitado_dict = {
                        'id': id_unico,
                        'nombre': nombre,
                        'pases': pases_int,
                        'ninos': ninos_int,
                        'mesa': 0,
                        'email': '',
                        'telefono': '',
                        'confirmado': False,
                        'fecha_confirmacion': None,
                        'notas': ''
                    }
                    
                    # A√±adir a la lista
                    lista_invitados_json.append(invitado_dict)
                    print(f"  üë§ Procesado: {nombre} -> ID: {id_unico} (Pases: {pases_int}, Ni√±os: {ninos_int})")
                    
                except Exception as e:
                    print(f"‚ùå Error procesando fila {i+1}: {e}")
                    continue
        
        # Escribir la lista completa en el archivo JSON
        with open(OUTPUT_JSON_FILENAME, mode='w', encoding='utf-8') as jsonfile:
            json.dump(lista_invitados_json, jsonfile, ensure_ascii=False, indent=2)
        
        print(f"\nüéâ ¬°√âxito! Se ha creado el archivo JSON: {OUTPUT_JSON_FILENAME}")
        print(f"üéâ ¬°√âxito! Se han generado {len(lista_invitados_json)} c√≥digos QR en: {QR_CODES_OUTPUT_FOLDER}")
        print(f"üìä Total de invitados procesados: {len(lista_invitados_json)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error general durante el procesamiento: {e}")
        return False

def crear_csv_ejemplo():
    """Crea un archivo CSV de ejemplo con la estructura correcta."""
    ejemplo_csv = """nombre,pases,ninos
Familia Garc√≠a L√≥pez,4,1
Mar√≠a Gonz√°lez,2,0
Carlos Rodr√≠guez,1,0
Familia Mart√≠nez,3,2
Ana L√≥pez,1,0"""
    
    with open('data/invitados_ejemplo.csv', 'w', encoding='utf-8') as f:
        f.write(ejemplo_csv)
    
    print("üìù Archivo CSV de ejemplo creado: data/invitados_ejemplo.csv")
    print("üìã Puedes usar este archivo como base para tu lista de invitados")

def main():
    """Funci√≥n principal."""
    print("üé≠ Generador de C√≥digos QR para Boda")
    print("=" * 50)
    
    # Verificar URL
    if BASE_VALIDATION_URL == 'https://mibodaag.netlify.app/validar.html':
        print("‚ö†Ô∏è  IMPORTANTE: Verifica que la URL en BASE_VALIDATION_URL sea correcta")
        print(f"   URL actual: {BASE_VALIDATION_URL}")
    
    # Verificar si existe el CSV
    if not os.path.exists(INPUT_CSV_FILENAME):
        print(f"‚ùå No se encontr√≥ el archivo {INPUT_CSV_FILENAME}")
        print("üìù Creando archivo CSV de ejemplo...")
        crear_csv_ejemplo()
        return
    
    # Procesar CSV existente
    if procesar_csv_existente():
        print("\n‚úÖ Proceso completado exitosamente!")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Verifica que los c√≥digos QR se generaron correctamente")
        print("2. Sube los archivos JSON y QR a tu sitio web")
        print("3. Prueba la validaci√≥n con uno de los c√≥digos QR")
    else:
        print("\n‚ùå El proceso no se complet√≥ correctamente")

if __name__ == "__main__":
    main() 