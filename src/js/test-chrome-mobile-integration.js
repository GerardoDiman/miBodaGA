// test-chrome-mobile-integration.js
// Archivo de prueba para verificar la integraci√≥n del Chrome Mobile Fix

console.log('üß™ Test de integraci√≥n Chrome Mobile iniciado');

(function() {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üß™ DOM cargado, ejecutando pruebas...');
        
        // Funci√≥n para ejecutar todas las pruebas
        function runAllTests() {
            console.log('üß™ Ejecutando todas las pruebas...');
            
            // Test 1: Verificar que RobustStorage est√© disponible
            testRobustStorage();
            
            // Test 2: Verificar funciones de persistencia
            testPersistenceFunctions();
            
            // Test 3: Verificar recuperaci√≥n de estado
            testStateRecovery();
            
            // Test 4: Verificar integraci√≥n con validaci√≥n
            testValidationIntegration();
            
            console.log('üß™ Todas las pruebas completadas');
        }
        
        // Test 1: RobustStorage
        function testRobustStorage() {
            console.log('üß™ Test 1: Verificando RobustStorage...');
            
            if (window.RobustStorage) {
                console.log('‚úÖ RobustStorage disponible');
                
                try {
                    const storage = new window.RobustStorage();
                    console.log('‚úÖ RobustStorage instanciado correctamente');
                    
                    // Test b√°sico de almacenamiento
                    const testData = { test: 'data', timestamp: Date.now() };
                    const success = storage.set('test_key', testData);
                    
                    if (success) {
                        console.log('‚úÖ Almacenamiento b√°sico funciona');
                        
                        const retrieved = storage.get('test_key');
                        if (retrieved && retrieved.test === testData.test) {
                            console.log('‚úÖ Recuperaci√≥n b√°sica funciona');
                        } else {
                            console.warn('‚ö†Ô∏è Recuperaci√≥n b√°sica fall√≥');
                        }
                        
                        // Limpiar
                        storage.remove('test_key');
                    } else {
                        console.warn('‚ö†Ô∏è Almacenamiento b√°sico fall√≥');
                    }
                    
                } catch (e) {
                    console.error('‚ùå Error instanciando RobustStorage:', e);
                }
                
            } else {
                console.warn('‚ö†Ô∏è RobustStorage no disponible');
            }
        }
        
        // Test 2: Funciones de persistencia
        function testPersistenceFunctions() {
            console.log('üß™ Test 2: Verificando funciones de persistencia...');
            
            if (window.persistConfirmation) {
                console.log('‚úÖ persistConfirmation disponible');
                
                // Test de persistencia
                const testGuestId = 'test123';
                const testData = {
                    guestId: testGuestId,
                    guestData: { nombre: 'Test Guest', pases: 2 },
                    confirmedAt: new Date().toISOString()
                };
                
                const success = window.persistConfirmation(testGuestId, testData);
                if (success) {
                    console.log('‚úÖ Persistencia de confirmaci√≥n funciona');
                } else {
                    console.warn('‚ö†Ô∏è Persistencia de confirmaci√≥n fall√≥');
                }
                
            } else {
                console.warn('‚ö†Ô∏è persistConfirmation no disponible');
            }
        }
        
        // Test 3: Recuperaci√≥n de estado
        function testStateRecovery() {
            console.log('üß™ Test 3: Verificando recuperaci√≥n de estado...');
            
            if (window.recoverChromeMobileState) {
                console.log('‚úÖ recoverChromeMobileState disponible');
                
                // Simular recuperaci√≥n
                try {
                    window.recoverChromeMobileState();
                    console.log('‚úÖ Recuperaci√≥n de estado ejecutada');
                } catch (e) {
                    console.error('‚ùå Error en recuperaci√≥n de estado:', e);
                }
                
            } else {
                console.warn('‚ö†Ô∏è recoverChromeMobileState no disponible');
            }
        }
        
        // Test 4: Integraci√≥n con validaci√≥n
        function testValidationIntegration() {
            console.log('üß™ Test 4: Verificando integraci√≥n con validaci√≥n...');
            
            if (window.performValidation) {
                console.log('‚úÖ performValidation disponible');
            } else {
                console.warn('‚ö†Ô∏è performValidation no disponible');
            }
            
            if (window.recoverGuestState) {
                console.log('‚úÖ recoverGuestState disponible');
            } else {
                console.warn('‚ö†Ô∏è recoverGuestState no disponible');
            }
            
            if (window.updateUIBasedOnConfirmation) {
                console.log('‚úÖ updateUIBasedOnConfirmation disponible');
            } else {
                console.warn('‚ö†Ô∏è updateUIBasedOnConfirmation no disponible');
            }
        }
        
        // Ejecutar pruebas despu√©s de un delay para asegurar que todo est√© cargado
        setTimeout(runAllTests, 2000);
        
        // Ejecutar pruebas adicionales despu√©s de 5 segundos
        setTimeout(() => {
            console.log('üß™ Ejecutando pruebas tard√≠as...');
            
            // Verificar que las funciones est√©n disponibles globalmente
            const globalFunctions = [
                'diagnoseChromeMobileIssues',
                'recoverChromeMobileState',
                'persistConfirmation',
                'RobustStorage'
            ];
            
            globalFunctions.forEach(funcName => {
                if (window[funcName]) {
                    console.log(`‚úÖ ${funcName} disponible globalmente`);
                } else {
                    console.warn(`‚ö†Ô∏è ${funcName} NO disponible globalmente`);
                }
            });
            
        }, 5000);
        
        // Exponer funci√≥n de prueba globalmente
        window.runChromeMobileTests = runAllTests;
        
        console.log('üß™ Test de integraci√≥n Chrome Mobile configurado');
    });
})();
